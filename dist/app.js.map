{"version":3,"sources":["app.js"],"names":["path","require","config","__dirname","express","request","cors","querystring","cookieParser","client_id","process","env","CLIENT_ID","client_secret","CLIENT_SECRET","redirect_uri","REDIRECT_URI","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","get","req","res","state","cookie","redirect","stringify","response_type","scope","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","listen"],"mappings":";AAAA,MAAMA,EAAOC,QAAQ,QACrBA,QAAQ,UAAUC,OAAO,CAACF,KAAKG,UAAU,UACzC,IAAIC,EAAUH,QAAQ,WAClBI,EAAUJ,QAAQ,WAClBK,EAAOL,QAAQ,QACfM,EAAcN,QAAQ,eACtBO,EAAeP,QAAQ,iBAEvBQ,EAAYC,QAAQC,IAAIC,UACxBC,EAAgBH,QAAQC,IAAIG,cAC5BC,EAAeL,QAAQC,IAAIK,aAO3BC,EAAuB,SAASC,GAIlC,IAHA,IAAIC,EAAO,GACPC,EAAW,iEAENC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAE9D,OAAOC,GAGLO,EAAW,qBAEXC,EAAMvB,IAEVuB,EAAIC,IAAIxB,EAAQyB,OAAO1B,UAAY,MAC/ByB,IAAItB,KACJsB,IAAIpB,KAERmB,EAAIG,IAAI,SAAU,SAASC,EAAKC,GAE9B,IAAIC,EAAQhB,EAAqB,IACjCe,EAAIE,OAAOR,EAAUO,GAIrBD,EAAIG,SAAS,0CACX5B,EAAY6B,UAAU,CACpBC,cAAe,OACf5B,UAAWA,EACX6B,MALQ,kDAMRvB,aAAcA,EACdkB,MAAOA,OAIbN,EAAIG,IAAI,YAAa,SAASC,EAAKC,GAKjC,IAAIO,EAAOR,EAAIS,MAAMD,MAAQ,KACzBN,EAAQF,EAAIS,MAAMP,OAAS,KAC3BQ,EAAcV,EAAIW,QAAUX,EAAIW,QAAQhB,GAAY,KAExD,GAAc,OAAVO,GAAkBA,IAAUQ,EAC9BT,EAAIG,SAAS,KACX5B,EAAY6B,UAAU,CACpBO,MAAO,wBAEN,CACLX,EAAIY,YAAYlB,GAChB,IAAImB,EAAc,CAChBC,IAAK,yCACLC,KAAM,CACJR,KAAMA,EACNxB,aAAcA,EACdiC,WAAY,sBAEdC,QAAS,CACP,cAAiB,SAAY,IAAIC,OAAOzC,EAAY,IAAMI,GAAesC,SAAS,WAEpFC,MAAM,GAGR/C,EAAQgD,KAAKR,EAAa,SAASF,EAAOW,EAAUC,GAClD,GAAKZ,GAAiC,MAAxBW,EAASE,WAuBrBxB,EAAIG,SAAS,KACX5B,EAAY6B,UAAU,CACpBO,MAAO,uBAzB8B,CAEzC,IAAIc,EAAeF,EAAKE,aACpBC,EAAgBH,EAAKG,cAErBC,EAAU,CACZb,IAAK,gCACLG,QAAS,CAAE,cAAiB,UAAYQ,GACxCL,MAAM,GAIR/C,EAAQyB,IAAI6B,EAAS,SAAShB,EAAOW,EAAUC,GAC7CK,QAAQC,IAAIN,KAIdvB,EAAIG,SAAS,KACX5B,EAAY6B,UAAU,CACpBqB,aAAcA,EACdC,cAAeA,WAY3B/B,EAAIG,IAAI,iBAAkB,SAASC,EAAKC,GAGtC,IAAI0B,EAAgB3B,EAAIS,MAAMkB,cAC1Bb,EAAc,CAChBC,IAAK,yCACLG,QAAS,CAAE,cAAiB,SAAY,IAAIC,OAAOzC,EAAY,IAAMI,GAAesC,SAAS,WAC7FJ,KAAM,CACJC,WAAY,gBACZU,cAAeA,GAEjBN,MAAM,GAGR/C,EAAQgD,KAAKR,EAAa,SAASF,EAAOW,EAAUC,GAClD,IAAKZ,GAAiC,MAAxBW,EAASE,WAAoB,CACzC,IAAIC,EAAeF,EAAKE,aACxBzB,EAAI8B,KAAK,CACP,aAAgBL,SAMxBG,QAAQC,IAAI,qBACZlC,EAAIoC,OAAO","file":"app.js","sourceRoot":"","sourcesContent":["const path = require('path')\r\nrequire('dotenv').config({path:__dirname+'/.env'});\r\nvar express = require('express'); // Express web server framework\r\nvar request = require('request'); // \"Request\" library\r\nvar cors = require('cors');\r\nvar querystring = require('querystring');\r\nvar cookieParser = require('cookie-parser');\r\n\r\nvar client_id = process.env.CLIENT_ID; // Your client id\r\nvar client_secret = process.env.CLIENT_SECRET; // Your secret\r\nvar redirect_uri = process.env.REDIRECT_URI; // Your redirect uri\r\n\r\n/**\r\n * Generates a random string containing numbers and letters\r\n * @param  {number} length The length of the string\r\n * @return {string} The generated string\r\n */\r\nvar generateRandomString = function(length) {\r\n  var text = '';\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n};\r\n\r\nvar stateKey = 'spotify_auth_state';\r\n\r\nvar app = express();\r\n\r\napp.use(express.static(__dirname + '/'))\r\n   .use(cors())\r\n   .use(cookieParser());\r\n\r\napp.get('/login', function(req, res) {\r\n\r\n  var state = generateRandomString(16);\r\n  res.cookie(stateKey, state);\r\n\r\n  // your application requests authorization\r\n  var scope = 'user-read-private user-read-email user-top-read';\r\n  res.redirect('https://accounts.spotify.com/authorize?' +\r\n    querystring.stringify({\r\n      response_type: 'code',\r\n      client_id: client_id,\r\n      scope: scope,\r\n      redirect_uri: redirect_uri,\r\n      state: state\r\n    }));\r\n});\r\n\r\napp.get('/callback', function(req, res) {\r\n\r\n  // your application requests refresh and access tokens\r\n  // after checking the state parameter\r\n\r\n  var code = req.query.code || null;\r\n  var state = req.query.state || null;\r\n  var storedState = req.cookies ? req.cookies[stateKey] : null;\r\n\r\n  if (state === null || state !== storedState) {\r\n    res.redirect('/#' +\r\n      querystring.stringify({\r\n        error: 'state_mismatch'\r\n      }));\r\n  } else {\r\n    res.clearCookie(stateKey);\r\n    var authOptions = {\r\n      url: 'https://accounts.spotify.com/api/token',\r\n      form: {\r\n        code: code,\r\n        redirect_uri: redirect_uri,\r\n        grant_type: 'authorization_code'\r\n      },\r\n      headers: {\r\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\r\n      },\r\n      json: true\r\n    };\r\n\r\n    request.post(authOptions, function(error, response, body) {\r\n      if (!error && response.statusCode === 200) {\r\n\r\n        var access_token = body.access_token,\r\n            refresh_token = body.refresh_token;\r\n\r\n        var options = {\r\n          url: 'https://api.spotify.com/v1/me',\r\n          headers: { 'Authorization': 'Bearer ' + access_token },\r\n          json: true\r\n        };\r\n\r\n        // use the access token to access the Spotify Web API\r\n        request.get(options, function(error, response, body) {\r\n          console.log(body);\r\n        });\r\n\r\n        // we can also pass the token to the browser to make requests from there\r\n        res.redirect('/#' +\r\n          querystring.stringify({\r\n            access_token: access_token,\r\n            refresh_token: refresh_token\r\n          }));\r\n      } else {\r\n        res.redirect('/#' +\r\n          querystring.stringify({\r\n            error: 'invalid_token'\r\n          }));\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\napp.get('/refresh_token', function(req, res) {\r\n\r\n  // requesting access token from refresh token\r\n  var refresh_token = req.query.refresh_token;\r\n  var authOptions = {\r\n    url: 'https://accounts.spotify.com/api/token',\r\n    headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },\r\n    form: {\r\n      grant_type: 'refresh_token',\r\n      refresh_token: refresh_token\r\n    },\r\n    json: true\r\n  };\r\n\r\n  request.post(authOptions, function(error, response, body) {\r\n    if (!error && response.statusCode === 200) {\r\n      var access_token = body.access_token;\r\n      res.send({\r\n        'access_token': access_token\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nconsole.log('Listening on 8888');\r\napp.listen(8888);"]}